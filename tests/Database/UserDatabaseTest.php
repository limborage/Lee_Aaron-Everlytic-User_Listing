<?php

namespace Tests\Database;

use App\Repository\UserRepository;
use App\User;
use Illuminate\Pagination\LengthAwarePaginator;
use Tests\TestCase;

class UserDatabaseTest extends TestCase
{
    private const TESTING_EMAIL = 'database@test.com';
    private const TESTING_UPDATE_EMAIL = 'databaseupdated@test.com';

    private $id;

    /**
     * @var $userRepo UserRepository
     */
    private $userRepo;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->userRepo = $this->app->make(UserRepository::class);
    }

    public function testCreateUser()
    {
        $this->assertDatabaseMissing('users', [
            'email' => self::TESTING_EMAIL
        ]);

        factory(User::class)->create([
            'email' => self::TESTING_EMAIL
        ]);

        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_EMAIL
        ]);
    }

    /**
     * @depends testCreateUser
     */
    public function testFindUserByKey()
    {
        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_EMAIL
        ]);

        $user = $this->userRepo->findByKey('email', self::TESTING_EMAIL);

        $this->assertSame(self::TESTING_EMAIL, $user->first()->email, 'Found user by key.');

        $this->id = $user->first()->getKey();
    }

    /**
     * @depends testFindUserByKey
     */
    public function testFindUserById()
    {
        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_EMAIL
        ]);

        $userId = $this->userRepo->findByKey('email', self::TESTING_EMAIL)->first()->getKey();
        $user = $this->userRepo->findById($userId);

        $this->assertSame(self::TESTING_EMAIL, $user->email, 'Found user by id.');
    }

    /**
     * @depends testFindUserById
     */
    public function testUpdateUser()
    {
        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_EMAIL
        ]);

        $userId = $this->userRepo->findByKey('email', self::TESTING_EMAIL)->first()->getKey();

        $user = $this->userRepo->updateEntity($userId, [
            'email' => self::TESTING_UPDATE_EMAIL
        ]);

        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_UPDATE_EMAIL
        ]);

        $this->assertGreaterThan(0, $user, 'User updated.');
    }

    /**
     * @depends testFindUserById
     */
    public function testFindPaginatedData()
    {
        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_UPDATE_EMAIL
        ]);

        $userData = $this->userRepo->findAllRecordsWithLimit(1);

        $this->assertInstanceOf(LengthAwarePaginator::class, $userData, 'Got paginator');
    }

    /**
     * @depends testFindPaginatedData
     */
    public function testDeleteUser()
    {
        $this->assertDatabaseHas('users', [
            'email' => self::TESTING_UPDATE_EMAIL
        ]);

        $user = $this->userRepo->findByKey('email', self::TESTING_UPDATE_EMAIL);

        $this->userRepo->deleteEntity($user->first()->getKey());

        //Make sure neither email exists
        $this->assertDatabaseMissing('users', [
            'email' => self::TESTING_UPDATE_EMAIL
        ]);

        $this->assertDatabaseMissing('users', [
            'email' => self::TESTING_EMAIL
        ]);
    }
}